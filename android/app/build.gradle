import com.android.build.api.dsl.ManagedVirtualDevice


plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'org.jetbrains.kotlin.plugin.compose'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.firebase-perf' version '2.0.1'
    id 'com.google.firebase.crashlytics'
    id 'com.facebook.react'
}

react {
    /* Autolinking */
    autolinkLibrariesWithApp()
}

android {
    compileSdk parent.compileSdkVersion

    defaultConfig {
        applicationId "exchange.dydx.trading"
        minSdkVersion parent.minSdkVersion
        targetSdkVersion parent.targetSdkVersion
        versionCode 10000
        versionName "1.13.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        signingConfig signingConfigs.debug
    }

    namespace 'exchange.dydx.trading'

    android {
        sourceSets {
            String sharedTestDir = 'src/sharedTest/java'
            test {
                java.srcDirs += sharedTestDir
                resources.srcDirs += 'src/sharedTest/resources'
            }
            androidTest {
                java.srcDirs += sharedTestDir
            }
        }

        lint {
            baseline = file("lint-baseline.xml")
        }

        packagingOptions {
            jniLibs {
                // Running into UnsatisfiedLinkError on some devices when linking libsqlcipher.so (used by WalletConnect)
                // https://github.com/sqlcipher/android-database-sqlcipher/issues/635#issuecomment-1782914589
                 useLegacyPackaging = false
            }
        }

    }

    buildTypes {
        debug {
            applicationIdSuffix = ".debug"
            versionNameSuffix = "-debug"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
            debuggable = true
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
            debuggable = false
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests {
        includeAndroidResources = true

        all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }

    buildFeatures {
        compose true
        buildConfig true
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/AL2.0', 'META-INF/LGPL2.1', 'META-INF/versions/9/OSGI-INF/MANIFEST.MF']
        }
    }

    configurations {
        all {
            // Exclude libraries to resolve duplicate dependencies
            exclude group: 'org.bouncycastle', module: 'bcprov-jdk15to18'
            exclude group: 'org.bouncycastle', module: 'bcprov-jdk15on'
        }
    }

    composeOptions {
        kotlinCompilerExtensionVersion "$composeCompilerVersion"
    }

    testOptions {
        devices {
            pixel2api30atd(ManagedVirtualDevice) {
                // Use device profiles you typically see in Android Studio
                device = "Pixel 2"
                apiLevel = 30
                // You can also specify "google" if you require Google Play Services.
                systemImageSource = "aosp-atd"
            }
            pixel2api30(ManagedVirtualDevice) {
                // Use device profiles you typically see in Android Studio
                device = "Pixel 2"
                apiLevel = 30
                // You can also specify "google" if you require Google Play Services.
                systemImageSource = "aosp"
            }
            pixel2api27(ManagedVirtualDevice) {
                device = "Pixel 2"
                apiLevel = 27
                systemImageSource = "aosp"
            }
            nexus9api29(ManagedVirtualDevice) {
                device = "Nexus 9"
                apiLevel = 29
                systemImageSource = "aosp"
            }
        }
    }
}

/*
 Dependency versions are defined in the top level build.gradle file. This helps keeping track of
 all versions in a single place. This improves readability and helps managing project complexity.
 */
dependencies {
    /* Module Dependencies */

    implementation "com.facebook.react:react-android"
    implementation "com.facebook.react:hermes-android"

    implementation "com.facebook.soloader:soloader:0.12.1"

    // Module dependencies
    implementation project(':v4:common')
    implementation project(':v4:integration:cosmos')
    implementation project(':v4:integration:fcm')
    implementation project(':v4:integration:react')
    implementation project(':v4:core')
    implementation project(path: ':v4:integration:dydxStateManager')
    implementation project(path: ':v4:integration:dydxFiatRamp')
    implementation project(path: ':v4:utilities')
    implementation project(path: ':v4:platformUI')
    implementation project(path: ':v4:feature:shared')

    /* Local Dependencies */

    implementation "exchange.dydx.abacus:v4-abacus-jvm:$abacusVersion"


    // App dependencies

    implementation "androidx.core:core-splashscreen:1.0.1"

    implementation "androidx.annotation:annotation:$androidXAnnotations"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$kotlinxSerializationVersion"

    // Import the Firebase BoM
    implementation platform("com.google.firebase:firebase-bom:$firebaseBomVersion")
    implementation 'com.google.firebase:firebase-analytics'
    implementation("com.google.firebase:firebase-crashlytics")
    implementation("com.google.firebase:firebase-perf")
    implementation("com.google.firebase:firebase-messaging")


    // Add the dependencies for any other desired Firebase products
    // https://firebase.google.com/docs/android/setup#available-libraries

    implementation "com.facebook.stetho:stetho:$stethoVersion"

    implementation "androidx.appcompat:appcompat:$appcompatVersion"

    // Dependencies for local unit tests
    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.hamcrest:hamcrest-all:$hamcrestVersion"
    testImplementation "androidx.arch.core:core-testing:$archTestingVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
    testImplementation "com.google.truth:truth:$truthVersion"
    testImplementation "androidx.compose.ui:ui-test-junit4:$composeVersion"

    // Dependencies for Android unit tests
    androidTestImplementation "junit:junit:$junitVersion"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$composeVersion"

    // Add non-standard deps above. Deps added below this line may be periodically overwritten
    /* Standard Dependencies */

//    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"

    kapt "com.google.dagger:hilt-compiler:$hiltVersion"

    // Hilt
    implementation "com.google.dagger:dagger:$hiltVersion"
    implementation "com.google.dagger:hilt-core:$hiltVersion"
    implementation "com.google.dagger:hilt-android:$hiltVersion"

    // Compose
    implementation "androidx.compose.runtime:runtime:$composeVersion"

    implementation "androidx.compose.ui:ui:$composeVersion"
    implementation "androidx.compose.ui:ui-text:$composeVersion"
    implementation "androidx.compose.material:material:$composeVersion"

    //Logging
    implementation "com.jakewharton.timber:timber:$timberVersion"

    // Compose Tooling
    implementation "androidx.compose.ui:ui-tooling-preview:$composeVersion"
    debugImplementation "androidx.compose.ui:ui-tooling:$composeVersion"
    debugRuntimeOnly "androidx.compose.ui:ui-test-manifest:$composeVersion"
    debugImplementation "androidx.customview:customview:$customviewVersion"
    debugImplementation "androidx.customview:customview-poolingcontainer:$customviewPoolingVersion"

    // Testing
    testImplementation "junit:junit:$junitVersion"
//    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$composeVersion"

    androidTestImplementation "com.kaspersky.android-components:kaspresso:$kaspressoVersion"
    // Allure support
//    androidTestImplementation "com.kaspersky.android-components:kaspresso-allure-support:$kaspressoVersion"
    // Jetpack Compose support
    androidTestImplementation "com.kaspersky.android-components:kaspresso-compose-support:$kaspressoVersion"
    // https://stackoverflow.com/questions/73348523/java-lang-nosuchmethoderror-no-static-method-for-jetpack-composable
    implementation "androidx.tracing:tracing:$androidXTracingVersion"


    //
    // https://github.com/WalletConnect/WalletConnectKotlinV2
    //

    implementation platform("com.walletconnect:android-bom:$walletConnectVersion")
    implementation('com.walletconnect:android-core')
    implementation("com.walletconnect:walletconnect-modal")

    //
    // https://docs.cloud.coinbase.com/wallet-sdk/docs/android-install
    //
    implementation 'com.coinbase:coinbase-wallet-sdk:1.1.1'

    //
    // https://github.com/WalletConnect/kotlin-walletconnect-lib
    //
    //  implementation 'com.github.WalletConnect:kotlin-walletconnect-lib:0.9.9'

    //
    // https://github.com/InstantWebP2P/tweetnacl-java, for Phantom
    //
    implementation 'io.github.instantwebp2p:tweetnacl-java:1.1.2'

    implementation("com.github.komputing.khash:sha256:1.1.3")
}
